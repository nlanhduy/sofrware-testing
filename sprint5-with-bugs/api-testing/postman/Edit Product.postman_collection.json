{
	"info": {
		"_postman_id": "89d8de53-8e86-470c-9e1b-ca6200ce1ee7",
		"name": "Edit Product",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47123385",
		"_collection_link": "https://duy-nguyen-ee114f4e-4953385.postman.co/workspace/duy-nguyen-ee114f4e's-Workspace~2a7c83c1-e5b8-43e5-81a4-c0affe89526a/collection/47123385-89d8de53-8e86-470c-9e1b-ca6200ce1ee7?action=share&source=collection_link&creator=47123385"
	},
	"item": [
		{
			"name": "Admin Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"// giả sử response có field token\r",
							"if (response.token) {\r",
							"    pm.collectionVariables.set(\"authToken\", response.access_token);\r",
							"    console.log(\"Token saved:\", response.access_token);\r",
							"} else {\r",
							"    console.error(\"No token found in response\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"admin@practicesoftwaretesting.com\",\r\n    \"password\": \"welcome01\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Product",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function smartParse(value) {\r",
							"    if (value === undefined || value === null) return value;\r",
							"\r",
							"    if (!isNaN(value) && String(value).trim() !== \"\") {\r",
							"        return Number(value);\r",
							"    }\r",
							"    return String(value);\r",
							"}\r",
							"\r",
							"let body = {\r",
							"  name: pm.iterationData.get(\"name\"),\r",
							"  description: pm.iterationData.get(\"description\"),\r",
							"  stock: smartParse(pm.iterationData.get(\"stock\")),\r",
							"  price: smartParse(pm.iterationData.get(\"price\")),\r",
							"  brand_id: smartParse(pm.iterationData.get(\"brand_id\")),\r",
							"  category_id: smartParse(pm.iterationData.get(\"category_id\")),\r",
							"  product_image_id: smartParse(pm.iterationData.get(\"product_image_id\")),\r",
							"  is_location_offer: String(pm.iterationData.get(\"is_location_offer\")).toLowerCase() === \"true\",\r",
							"  is_rental: String(pm.iterationData.get(\"is_rental\")).toLowerCase() === \"true\"\r",
							"};\r",
							"\r",
							"pm.collectionVariables.set(\"productBody\", JSON.stringify(body));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let actualStatus = pm.response.code;  \r",
							"let expectedStatus = pm.iterationData.get(\"expected_status\");  \r",
							"let testCaseId = pm.iterationData.get(\"id\") || \"N/A\";\r",
							"let testCaseDesc = pm.iterationData.get(\"description\") || \"Unknown test case\";\r",
							"\r",
							"pm.test(`Test case #${testCaseId}: ${testCaseDesc}`, function() {\r",
							"    pm.expect(actualStatus).to.eql(Number(expectedStatus));  \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{authToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{{productBody}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/products/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "productBody",
			"value": ""
		}
	]
}