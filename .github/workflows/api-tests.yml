name: API Tests with Postman CLI
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set environment variables
        run: |
          echo "SPRINT_FOLDER=sprint5-with-bugs" >> $GITHUB_ENV
          echo "DISABLE_LOGGING=false" >> $GITHUB_ENV

      - name: Start Docker Compose environment
        run: |
          docker-compose up -d
          echo "Waiting for services to start up..."
          sleep 30  # Give services time to initialize

      - name: Check if services are running
        run: |
          docker-compose ps
          # Check if laravel-api is running
          if ! docker-compose exec -T laravel-api php artisan --version; then
            echo "Laravel API service is not running properly"
            exit 1
          fi
          # Check if web server is running
          if ! curl -sSf http://localhost:8091/status > /dev/null; then
            echo "Web server is not running properly"
            exit 1
          fi
          # Check if database is running
          if ! docker-compose exec -T mariadb mysqladmin ping -h localhost -u root -proot --silent; then
            echo "Database is not running properly"
            exit 1
          fi

      - name: Set up database
        run: |
          docker-compose exec -T laravel-api php artisan migrate:fresh --seed
          echo "Database setup complete"

      - name: Test API connection
        run: |
          echo "Testing API health..."
          curl -v http://localhost:8091/status || echo "Status endpoint not available"
          echo "Testing API documentation..."
          curl -s http://localhost:8091/api/documentation | head -20

      - name: Test Product API endpoint
        run: |
          echo "Testing Product API endpoint..."
          echo "Response from products/1:"
          curl -s http://localhost:8091/products/1

      - name: Test Admin Login API
        run: |
          echo "Testing Admin Login API..."
          RESPONSE=$(curl -s -X POST http://localhost:8091/users/login \
            -H "Content-Type: application/json" \
            -d '{"email": "admin@practicesoftwaretesting.com", "password": "welcome01"}')
          echo "Login response:"
          echo "$RESPONSE"

          # Trích xuất token nếu có jq
          if command -v jq &> /dev/null; then
            TOKEN=$(echo $RESPONSE | jq -r '.access_token')
            if [ "$TOKEN" != "null" ] && [ -n "$TOKEN" ]; then
              echo "Successfully extracted token"
              # Lưu token để sử dụng trong các bước tiếp theo nếu cần
              echo "AUTH_TOKEN=$TOKEN" >> $GITHUB_ENV
            else
              echo "Failed to extract token from response"
            fi
          else
            echo "jq not installed, skipping token extraction"
          fi

      - name: Create environment file for Postman
        run: |
          echo "Creating environment file for Postman..."
          cat > "sprint5-with-bugs/api-testing/postman/environment.json" << 'EOF'
          {
            "id": "test-env",
            "name": "Test Environment",
            "values": [
              {
                "key": "baseUrl",
                "value": "http://localhost:8091",
                "enabled": true
              }
            ],
            "_postman_variable_scope": "environment"
          }
          EOF
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman
        run: |
          postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }} || echo "Running without login"
      - name: Run Add Product API Tests with Postman CLI
        run: |
          postman collection run "sprint5-with-bugs/api-testing/postman/Add Product.postman_collection.json" --iteration-data "sprint5-with-bugs/api-testing/postman/AddProduct.csv" --verbose
        continue-on-error: true
      - name: Run Edit Product API Tests with Postman CLI
        run: |
          postman collection run "sprint5-with-bugs/api-testing/postman/Edit Product.postman_collection.json" --iteration-data "sprint5-with-bugs/api-testing/postman/EditProduct.csv" --verbose
        continue-on-error: true
      - name: Run Search and Filter API Tests with Postman CLI
        run: |
          postman collection run "sprint5-with-bugs/api-testing/postman/Search and Filter.postman_collection.json" --iteration-data "sprint5-with-bugs/api-testing/postman/SearchFilter.csv" --verbose
        continue-on-error: true
      - name: Show Docker logs on failure
        if: always()
        run: |
          echo "==== Docker Container Logs ===="
          docker compose logs
      - name: Shutdown Docker Compose
        if: always()
        run: docker compose down -v
