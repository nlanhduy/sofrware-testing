name: API Tests with Postman CLI
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Set environment variables
        run: |
          echo "SPRINT_FOLDER=sprint5-with-bugs" >> $GITHUB_ENV
          echo "DISABLE_LOGGING=false" >> $GITHUB_ENV

      - name: Prepare Laravel directories
        run: |
          mkdir -p ${SPRINT_FOLDER}/API/storage/logs
          mkdir -p ${SPRINT_FOLDER}/API/storage/framework/cache
          mkdir -p ${SPRINT_FOLDER}/API/storage/framework/sessions
          mkdir -p ${SPRINT_FOLDER}/API/storage/framework/views
          mkdir -p ${SPRINT_FOLDER}/API/bootstrap/cache
          chmod -R 777 ${SPRINT_FOLDER}/API/storage
          chmod -R 777 ${SPRINT_FOLDER}/API/bootstrap/cache

      - name: Start Docker Compose environment
        run: |
          docker compose up -d
          echo "Waiting for services to start up..."
          sleep 15

      - name: Set up database
        run: |
          docker compose exec -T laravel-api php artisan migrate:fresh --seed
          echo "Database setup complete"

      - name: Create environment file for Postman
        run: |
          echo "Creating environment file for Postman..."
          cat > "sprint5-with-bugs/api-testing/postman/environment.json" << EOF
          {
            "id": "test-env",
            "name": "Test Environment",
            "values": [
              {
                "key": "base_url",
                "value": "http://localhost:8091",
                "enabled": true
              }
            ],
            "_postman_variable_scope": "environment"
          }
          EOF
          cat "sprint5-with-bugs/api-testing/postman/environment.json"

      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      - name: Login to Postman
        run: |
          postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }} || echo "Running without login"

      - name: Run Add Product API Tests with Postman CLI
        run: |
          echo "Validating AddProduct.csv..."
          head -5 "sprint5-with-bugs/api-testing/postman/AddProduct.csv"
          postman collection run "sprint5-with-bugs/api-testing/postman/Add Product.postman_collection.json" \
            -e "sprint5-with-bugs/api-testing/postman/environment.json" \
            --iteration-data "sprint5-with-bugs/api-testing/postman/AddProduct.csv" \
            --verbose
        continue-on-error: true

      - name: Run Edit Product API Tests with Postman CLI
        run: |
          echo "Validating EditProduct.csv..."
          head -5 "sprint5-with-bugs/api-testing/postman/EditProduct.csv"
          postman collection run "sprint5-with-bugs/api-testing/postman/Edit Product.postman_collection.json" \
            -e "sprint5-with-bugs/api-testing/postman/environment.json" \
            --iteration-data "sprint5-with-bugs/api-testing/postman/EditProduct.csv" \
            --verbose
        continue-on-error: true

      - name: Run Search and Filter API Tests with Postman CLI
        run: |
          echo "Validating SearchFilter.csv..."
          head -5 "sprint5-with-bugs/api-testing/postman/SearchFilter.csv"
          postman collection run "sprint5-with-bugs/api-testing/postman/Search and Filter.postman_collection.json" \
            -e "sprint5-with-bugs/api-testing/postman/environment.json" \
            --iteration-data "sprint5-with-bugs/api-testing/postman/SearchFilter.csv" \
            --verbose
        continue-on-error: true

      - name: Export test results
        if: always()
        run: |
          mkdir -p test-results
          # If you have test results to export, add commands here

      - name: Show Docker logs on failure
        if: always()
        run: |
          echo "==== Docker Container Logs ===="
          docker compose logs laravel-api
          echo "==== MariaDB Logs ===="
          docker compose logs mariadb
          echo "==== Web Server Logs ===="
          docker compose logs web

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results
          retention-days: 7

      - name: Shutdown Docker Compose
        if: always()
        run: docker compose down -v
