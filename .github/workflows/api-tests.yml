name: API Tests with Postman CLI
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set environment variables
        run: |
          echo "SPRINT_FOLDER=sprint5-with-bugs" >> $GITHUB_ENV
          echo "DISABLE_LOGGING=false" >> $GITHUB_ENV
      
      - name: Start Docker Compose services
        run: |
          docker compose up -d
          echo "Docker Compose services started"
      
      - name: Check Docker containers
        run: docker compose ps
      
      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          sleep 30  # Đợi các service khởi động
      
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      
      - name: Login to Postman
        run: |
          postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }} || echo "Running without login"
      
      - name: Run Add Product API Tests with Postman CLI
        run: |
          postman collection run "sprint5-with-bugs/api-testing/postman/Add Product.postman_collection.json" --iteration-data "sprint5-with-bugs/api-testing/postman/AddProduct.csv" --verbose
        continue-on-error: true
      
      - name: Run Edit Product API Tests with Postman CLI
        run: |
          postman collection run "sprint5-with-bugs/api-testing/postman/Edit Product.postman_collection.json" --iteration-data "sprint5-with-bugs/api-testing/postman/EditProduct.csv" --verbose
        continue-on-error: true
      
      - name: Run Search and Filter API Tests with Postman CLI
        run: |
          postman collection run "sprint5-with-bugs/api-testing/postman/Search and Filter.postman_collection.json" --iteration-data "sprint5-with-bugs/api-testing/postman/SearchFilter.csv" --verbose
        continue-on-error: true
      
      - name: Show Docker logs on failure
        if: always()
        run: |
          echo "==== Docker Container Logs ===="
          docker compose logs
      
      - name: Shutdown Docker Compose
        if: always()
        run: docker compose down -v
